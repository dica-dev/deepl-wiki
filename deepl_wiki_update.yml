# .github/workflows/deepl_wiki_update.yml
#
# This GitHub Actions workflow automates the process of updating your central
# 'memo-repo' with documentation generated by `deepl-wiki`.
#
# ------------------
# --- HOW TO USE ---
# ------------------
# 1. Place this file in the `.github/workflows/` directory of each source
#    repository you want to document.
#
# 2. Configure the required secrets in your source repository's settings
#    under "Settings > Secrets and variables > Actions":
#    - `LLAMA_API_KEY`: Your API key for the Llama 4 service.
#    - `GH_PAT`: A GitHub Personal Access Token (PAT) with `repo` scope. This is
#                needed to push changes to your central memo repository.
#                Create one here: https://github.com/settings/tokens/new
#
# 3. Customize the `env` section below:
#    - `MEMO_REPO`: Set this to your central memo repository (e.g., `your-org/memo-repo`).
#    - `MEMO_OUTPUT_DIR`: The directory where `deepl-wiki index` saves the generated
#                       memo files. The default is `docs/memo`, adjust if needed.

name: 'DeepL Wiki: Update Memo'

on:
  push:
    # This workflow runs on every push to any branch.
    branches:
      - '**'

jobs:
  update-documentation-memo:
    runs-on: ubuntu-latest
    env:
      # --- REQUIRED CONFIGURATION ---
      MEMO_REPO: 'YOUR_ORG/YOUR_MEMO_REPO' # <-- CHANGE THIS
      MEMO_OUTPUT_DIR: 'docs/memo' # <-- Adjust if your output dir is different
      # ------------------------------

    steps:
      - name: 'Checkout Source Code'
        uses: actions/checkout@v4

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 'Install deepl-wiki'
        run: pip install deepl-wiki

      - name: 'Generate Documentation Memo'
        run: deepl-wiki index
        env:
          LLAMA_API_KEY: ${{ secrets.LLAMA_API_KEY }}

      - name: 'Checkout Memo Repository'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MEMO_REPO }}
          token: ${{ secrets.GH_PAT }}
          path: 'memo-repo-checkout' # Checkout to a temporary directory

      - name: 'Update and Push Memo'
        run: |
          set -ex

          SOURCE_REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          BRANCH_NAME="${{ github.ref_name }}"
          
          MEMO_CHECKOUT_DIR="memo-repo-checkout"
          cd "$MEMO_CHECKOUT_DIR"

          # Determine the target branch and path in the memo-repo
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            # If pushing to main/master, update the main branch of the memo-repo
            TARGET_BRANCH="main"
            TARGET_DIR="$SOURCE_REPO_NAME"
            git checkout "$TARGET_BRANCH"
          else
            # If pushing to a feature branch, create a corresponding branch in the memo-repo
            TARGET_BRANCH="$SOURCE_REPO_NAME/$BRANCH_NAME"
            TARGET_DIR="." # Place content at the root of the feature branch
            git checkout -B "$TARGET_BRANCH"
          fi

          # Create the target directory if it doesn't exist
          mkdir -p "$TARGET_DIR"

          # Copy the generated memo files into the target directory
          # The trailing slash on the source is important for rsync
          rsync -av --delete "$GITHUB_WORKSPACE/${{ env.MEMO_OUTPUT_DIR }}/" "$TARGET_DIR/"

          # Commit and push the changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Exit if there are no changes to commit
          if git diff --staged --quiet && git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          
          git add .
          git commit -m "docs: Update memo for $SOURCE_REPO_NAME ($BRANCH_NAME)"
          # Use --force because we are overwriting the branch history for feature branches
          git push --set-upstream origin "$TARGET_BRANCH" --force